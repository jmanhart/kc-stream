{"version":3,"sources":["streamer-data.js","App.js","serviceWorker.js","index.js"],"names":["StreamerData","App","className","href","map","item","link","key","target","rel","name","platformImg","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOAqHiBA,G,UArHI,CACjB,CACE,KAAQ,mBACR,KAAQ,yCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,QACR,KAAQ,8BACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,iBACR,KAAQ,uCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,UACR,KAAQ,gCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,UACR,KAAQ,gCACR,SAAY,SACZ,YAAe,0BAEjB,CACI,KAAQ,SACR,KAAQ,+BACR,SAAY,SACZ,YAAe,0BAEnB,CACE,KAAQ,WACR,KAAQ,iCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,aACR,KAAQ,mCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,YACR,KAAQ,kCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,gBACR,KAAQ,sCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,aACR,KAAQ,uCACR,SAAY,WACZ,YAAe,mBAEjB,CACE,KAAQ,YACR,KAAQ,kCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,SACR,KAAQ,+BACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,SACR,KAAQ,+BACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,eACR,KAAQ,qCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,eACR,KAAQ,qCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,eACR,KAAQ,qCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,gBACR,KAAQ,sCACR,SAAY,SACZ,YAAe,0BAEjB,CACE,KAAQ,SACR,KAAQ,+BACR,SAAY,SACZ,YAAe,4BChFNC,MA7Bf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,kEACA,uDAA4B,uBAAGC,KAAK,mCAAR,gBAC5B,4BACGH,EAAaI,KAAI,SAACC,GACjB,OACE,4BACE,uBACEH,UAAU,WACVC,KAAME,EAAKC,KACXC,IAAKF,EAAKC,KACVE,OAAO,SACPC,IAAI,uBAEJ,wBAAIF,IAAKF,EAAKK,MAAOL,EAAKK,OAE5B,yBAAKH,IAAKF,EAAKM,YAAaC,IAAKP,EAAKM,YAAaE,IAAI,iBCXjDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.73bf379c.chunk.js","sourcesContent":["const StreamerData = [\n    {\n      \"name\": \"ArtificialAndrew\",\n      \"link\": \"https://www.twitch.tv/artificialandrew\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"BZHub\",\n      \"link\": \"https://www.twitch.tv/BZHub\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"chachitownfair\",\n      \"link\": \"https://www.twitch.tv/chachitownfair\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"denec27\",\n      \"link\": \"Https://www.twitch.tv/denec27\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"gibrias\",\n      \"link\": \"https://www.twitch.tv/gibrias\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n        \"name\": \"hinzae\",\n        \"link\": \"https://www.twitch.tv/hinzae\",\n        \"platform\": \"Twitch\",\n        \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"HusKerrs\",\n      \"link\": \"https://www.twitch.tv/huskerrs\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"ItsManhart\",\n      \"link\": \"https://www.twitch.tv/ItsManhart\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"kooglertv\",\n      \"link\": \"https://www.twitch.tv/kooglertv\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"lotis_mindset\",\n      \"link\": \"https://www.twitch.tv/lotis_mindset\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"MnMenace86\",\n      \"link\": \"https://www.facebook.com/MnMenace86/\",\n      \"platform\": \"Facebook\",\n      \"platformImg\": \"FbLogoColor.png\"\n    },\n    {\n      \"name\": \"Nerdmeat_\",\n      \"link\": \"https://www.twitch.tv/nerdmeat_\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"RTY_KC\",\n      \"link\": \"https://www.twitch.tv/RTY_KC\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"sinrin\",\n      \"link\": \"https://www.twitch.tv/sinrin\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"slamdunkpony\",\n      \"link\": \"https://www.twitch.tv/slamdunkpony\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"SovereignSyd\",\n      \"link\": \"https://www.twitch.tv/sovereignsyd\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"starsofnight\",\n      \"link\": \"https://www.twitch.tv/starsofnight\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"tegannotsara1\",\n      \"link\": \"https://www.twitch.tv/tegannotsara1\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    },\n    {\n      \"name\": \"yantzi\",\n      \"link\": \"https://www.twitch.tv/yantzi\",\n      \"platform\": \"Twitch\",\n      \"platformImg\": \"TwitchGlitchPurple.png\"\n    }\n  ]\n\n  export default StreamerData;\n\n\n\n\n","import React from 'react';\nimport './App.scss';\nimport StreamerData from './streamer-data.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h2>ðŸŽ® Kansas City Streamers</h2>\n      <p>Last updated 9/18/2020 | <a href=\"https://twitter.com/JohnManhart\">Ask to Join</a></p>\n      <ul>\n        {StreamerData.map((item) => {\n          return (\n            <li>\n              <a\n                className=\"App-link\"\n                href={item.link}\n                key={item.link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <h4 key={item.name}>{item.name}</h4>\n              </a>\n              <img key={item.platformImg} src={item.platformImg} alt=\"Logo\" />\n            </li>\n          )\n        })}\n      </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}